{"ast":null,"code":"var _jsxFileName = \"/home/arystanbek/ArystanBookSN/src/components/Tools/Dialogs/Messages/Messages.jsx\";\nimport s from './Messages.module.css';\nimport Message from \"./Message/Message\";\nimport React from \"react\";\nimport { addMessageAC, updateMessageTextAC } from \"../../../../redux/store\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Messages = props => {\n  let newMessageElement = /*#__PURE__*/React.createRef();\n\n  let addMessage = () => {\n    props.dispatch(addMessageAC());\n  };\n\n  let updateMessageText = () => {\n    let NewText = newMessageElement.current.value;\n    let action = updateMessageTextAC(NewText);\n    props.dispatch(action);\n  };\n\n  console.log(props.newMessageText);\n  let messageElement = props.messageData.map(m => /*#__PURE__*/_jsxDEV(Message, {\n    message: m.message,\n    id: m.id\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 53\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: s.item,\n    children: [messageElement, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.items,\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        ref: newMessageElement,\n        value: props.newMessageText,\n        onChange: updateMessageText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addMessage,\n        children: \"send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Messages;\nexport default Messages;\n\nvar _c;\n\n$RefreshReg$(_c, \"Messages\");","map":{"version":3,"sources":["/home/arystanbek/ArystanBookSN/src/components/Tools/Dialogs/Messages/Messages.jsx"],"names":["s","Message","React","addMessageAC","updateMessageTextAC","Messages","props","newMessageElement","createRef","addMessage","dispatch","updateMessageText","NewText","current","value","action","console","log","newMessageText","messageElement","messageData","map","m","message","id","item","items"],"mappings":";AAAA,OAAOA,CAAP,MAAc,uBAAd;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,YAAR,EAAsBC,mBAAtB,QAAgD,yBAAhD;;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AACxB,MAAIC,iBAAiB,gBAAGL,KAAK,CAACM,SAAN,EAAxB;;AAEA,MAAIC,UAAU,GAAG,MAAM;AACnBH,IAAAA,KAAK,CAACI,QAAN,CAAeP,YAAY,EAA3B;AACH,GAFD;;AAIA,MAAIQ,iBAAiB,GAAG,MAAM;AAC1B,QAAIC,OAAO,GAAGL,iBAAiB,CAACM,OAAlB,CAA0BC,KAAxC;AACA,QAAIC,MAAM,GAAGX,mBAAmB,CAACQ,OAAD,CAAhC;AACAN,IAAAA,KAAK,CAACI,QAAN,CAAeK,MAAf;AACH,GAJD;;AAMAC,EAAAA,OAAO,CAACC,GAAR,CAAYX,KAAK,CAACY,cAAlB;AACA,MAAIC,cAAc,GAAGb,KAAK,CAACc,WAAN,CAAkBC,GAAlB,CAAsBC,CAAC,iBAAI,QAAC,OAAD;AAAS,IAAA,OAAO,EAAEA,CAAC,CAACC,OAApB;AAA6B,IAAA,EAAE,EAAED,CAAC,CAACE;AAAnC;AAAA;AAAA;AAAA;AAAA,UAA3B,CAArB;AACA,sBACI;AAAK,IAAA,SAAS,EAAExB,CAAC,CAACyB,IAAlB;AAAA,eACKN,cADL,eAEI;AAAK,MAAA,SAAS,EAAEnB,CAAC,CAAC0B,KAAlB;AAAA,8BACI;AAAU,QAAA,GAAG,EAAEnB,iBAAf;AACU,QAAA,KAAK,EAAED,KAAK,CAACY,cADvB;AAEU,QAAA,QAAQ,EAAEP;AAFpB;AAAA;AAAA;AAAA;AAAA,cADJ,eAII;AAAQ,QAAA,OAAO,EAAEF,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CA1BD;;KAAMJ,Q;AA4BN,eAAeA,QAAf","sourcesContent":["import s from './Messages.module.css'\nimport Message from \"./Message/Message\";\nimport React from \"react\";\nimport {addMessageAC, updateMessageTextAC} from \"../../../../redux/store\";\n\nconst Messages = (props) => {\n    let newMessageElement = React.createRef();\n\n    let addMessage = () => {\n        props.dispatch(addMessageAC());\n    };\n\n    let updateMessageText = () => {\n        let NewText = newMessageElement.current.value;\n        let action = updateMessageTextAC(NewText)\n        props.dispatch(action);\n    }\n\n    console.log(props.newMessageText)\n    let messageElement = props.messageData.map(m => <Message message={m.message} id={m.id} />);\n    return (\n        <div className={s.item}>\n            {messageElement}\n            <div className={s.items}>\n                <textarea ref={newMessageElement}\n                          value={props.newMessageText}\n                          onChange={updateMessageText}/>\n                <button onClick={addMessage} >send</button>\n            </div>\n        </div>\n    );\n};\n\nexport default Messages;"]},"metadata":{},"sourceType":"module"}